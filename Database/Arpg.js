Database.arpg = {	displayHpBar: true,	// When the player is detected	detection: {		_default: function(event) {			if (event.actionBattle.mode != 'passive') {				// View an animation of an event				rpg.animations['enemy_offensive'].setPositionEvent(event);				rpg.animations['enemy_offensive'].play();
				// The event came to the player				event.approachPlayer();				// The mode of the event becomes "offensive"				this.setEventMode(event, 'offensive');							}		}	},	// When the player is no longer detected	nodetection: {		_default: function(event) {			// The event will stop movement and incorporates current random displacement			event.moveRandom();		}	},	onChangeMode: function(event, mode) {			},	eventInvinsible: {		normal: function(event) {				}	},	eventAttack: {		_default: function(event) {			// When the player is attacked			var self = this;			event.turnTowardPlayer();//			rpg.animations['Fang'].setPositionEvent(rpg.player);//			rpg.animations['Fang'].play();			rpg.player.blink(30, 2);			event.action('attack_enemy', function() {				self.setEventMode(event, 'passive');			});//			rpg.player.actionBattle.hp -= 5;//			if (rpg.player.actionBattle.hp <= 0) {//				alert('Game Over !');//				window.location.reload(true);//			}//			else {//				$('#hp').animate({'width': ($('#hp').width() - 5) + 'px'});//			}		}		},	eventPassive: {		_default: function(event) {			var self = this;			event.moveRandom();			event.wait(25, false, function() {				event.detection = false;				self.setEventMode(event, 'normal');			});		}	},	eventAffected: {		_default: function(event) {			var self = this;			this.setEventMode(event, 'invinsible');			event.blink(30, 2, function() {				self.setEventMode(event, 'offensive');			});			event.actionBattle.hp -= 100;		}	},	enemyDead: {		drop_coin: function(event, item) {			event.createEventRelativeThis(item, {				move: false			});				}					},	// Cache events can be deposited on the ground//	eventsCache: ["coin"]};